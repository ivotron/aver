package aver

type validationParser Peg {
  state
}

expression <-
   global_predicates? validation !.

global_predicates <-
   ws 'for' predicates
      { p.EndGlobalPredicates() }

predicates <-
   <predicate ('and' predicate)*>
      { p.SetPredicates(buffer[begin:end]) }

validation <-
   ws 'expect' result

result <-
   value
      { p.EndLeft() }
   <op>
      { p.SetResultOp(buffer[begin:end]) }
   value
      { p.EndRight() }
   relative?

value <-
   str ws
      { p.BeginFunctionValue() }
   ( '(' predicates ')' ws )?
      { p.EndFunctionValue() }

op <-
   ws ('=' / '>' / '<' / '>=' / '<=' / '<>')

predicate <-
   str op literal

literal <-
   ws ( number / ['] str ['] ) ws

relative <-
   ws '*' number
      { p.SetRelative() }

str <-
   ws <[a-zA-Z] [a-zA-Z_0-9]*> ws
      { p.StringValue(buffer[begin:end]) }

number <-
   ws <[0-9]+ ('.' [0-9]+)?> ws
      { p.StringValue(buffer[begin:end]) }

ws <- [ \t\n\r]*
