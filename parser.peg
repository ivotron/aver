package aver

type validationParser Peg {
  state
}

expression <-
   global_predicate? validation !.

global_predicate <-
   'for' predicate (',' predicate)* { p.EndGlobalPredicate() }

validation <-
   'expect'
      { p.BeginValidation() }
   result

result <-
   value
      { p.EndLeft() }
   op
      { p.SetResultOp() }
   value
      { p.EndRight() }
   relative?

value <-
   from_function
      { p.EndFunctionValue() }
   / literal
      { p.EndLiteralValue() }

op <-
   ws <('=' / '>' / '<' / '>=' / '<=' / '!=')>
     { p.SetComparisonOp(buffer[begin:end]) }

from_function <-
   str ws
      { p.BeginFunctionValue() }
   '(' predicate (',' predicate)* ')'

predicate <-
   str
      { p.BeginPredicate() }
   op
   literal
      { p.EndPredicate() }

literal <-
   number
      { p.SetNumeric() }
   / str
      { p.SetString() }
   / any
      { p.SetAny() }

any <-
   ws ('*' / 'any') ws

relative <-
   ws '*' number
      { p.SetRelative() }

str <-
   ws <[a-zA-Z] [a-zA-Z_0-9]*> ws
      { p.StringValue(buffer[begin:end]) }

number <-
   ws <[0-9]+ ('.' [0-9]+)?> ws
      { p.StringValue(buffer[begin:end]) }

ws <- [ \t\n\r]*
